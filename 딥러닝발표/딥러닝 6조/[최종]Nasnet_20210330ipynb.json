{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"[최종]Nasnet_20210330ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QBJoiL-ZB-th"},"source":["#**0_Preparation**#"]},{"cell_type":"code","metadata":{"id":"ZFueSVSdnxqV"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NphjseeWrJSm","outputId":"3ea22839-55f0-4c2f-fbe8-70619a31b341"},"source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","os.environ['KAGGLE_USERNAME'] = \"financepark\"\n","os.environ['KAGGLE_KEY'] = \"bdbd2d4123356ced7712d5e0df68bdaf\"\n","\n","!kaggle datasets download -d arunrk7/surface-crack-detection\n","!unzip -q surface-crack-detection.zip\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading surface-crack-detection.zip to /content\n"," 93% 216M/233M [00:01<00:00, 179MB/s]\n","100% 233M/233M [00:01<00:00, 155MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vC4YLAWAtAxS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"115e212f-c5c5-4066-bd2e-de35d7b1e2ed"},"source":["print(len(os.listdir(\"Positive\")))\n","print(len(os.listdir(\"Positive\")))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["20000\n","20000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MVrVLZkHrcj_"},"source":["import os\n","import zipfile\n","import pickle\n","import tensorflow as tf\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from shutil import copyfile\n","from keras.callbacks import EarlyStopping\n","from keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras import Model,layers\n","import tensorflow as tf\n","import keras\n","import matplotlib.pyplot as plt\n","from matplotlib.image import imread\n","%matplotlib inline\n","import matplotlib.image  as mpimg\n","import matplotlib.pyplot as plt\n","from keras.callbacks import EarlyStopping\n","from keras.callbacks import ModelCheckpoint\n","import random\n","import numpy as np\n","from google.colab import files\n","from keras.preprocessing import image\n","from keras.applications import NASNetLarge\n","from keras.metrics import Recall\n","random.seed(821)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Y2P3Z3Dr2a-"},"source":["os.mkdir('/tmp/concrete')\n","os.mkdir('/tmp/concrete/training')\n","os.mkdir('/tmp/concrete/testing')\n","os.mkdir('/tmp/concrete/valid')\n","os.mkdir('/tmp/concrete/training/positive')\n","os.mkdir('/tmp/concrete/training/negative')\n","os.mkdir('/tmp/concrete/testing/positive')\n","os.mkdir('/tmp/concrete/testing/negative')\n","os.mkdir('/tmp/concrete/valid/positive')\n","os.mkdir('/tmp/concrete/valid/negative')\n","os.mkdir('/tmp/checkpoint')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sqJDbVXbr9wC"},"source":["def split_data(SOURCE,TRAINING,VALID,TESTING,TRAINING_SIZE,VALID_SIZE):\n","    files=[]\n","    for filename in os.listdir(SOURCE):\n","        file = SOURCE + filename\n","        if os.path.getsize(file) > 0:\n","            files.append(filename)\n","        else:\n","            print(filename + \"is zero length, so ignoring.\")\n","    training_length = int(len(files)*TRAINING_SIZE)\n","    valid_length = int(len(files)*VALID_SIZE)\n","    testing_length = int(len(files)-training_length-valid_length)\n","    shuffled_set = random.sample(files,len(files))\n","    valid_set = shuffled_set[0:valid_length]\n","    training_set = shuffled_set[valid_length:-testing_length]\n","    testing_set = shuffled_set[-testing_length:]\n","    for filename in training_set:\n","        this_file = SOURCE + filename\n","        destination = TRAINING + filename\n","        copyfile(this_file,destination)\n","    for filename in valid_set:\n","        this_file = SOURCE + filename\n","        destination = VALID + filename\n","        copyfile(this_file,destination)\n","    for filename in testing_set:\n","        this_file = SOURCE + filename\n","        destination = TESTING + filename\n","        copyfile(this_file,destination)\n","        \n","POSITIVE_SOURCE_DIR = \"/content/Positive/\"\n","NEGATIVE_SOURCE_DIR = \"/content/Negative/\"\n","TRAINING_POSITIVE_DIR = '/tmp/concrete/training/positive/'  \n","TRAINING_NEGATIVE_DIR = '/tmp/concrete/training/negative/'   \n","VALID_POSITIVE_DIR = '/tmp/concrete/valid/positive/'  \n","VALID_NEGATIVE_DIR = '/tmp/concrete/valid/negative/'   \n","TESTING_POSITIVE_DIR = '/tmp/concrete/testing/positive/'\n","TESTING_NEGATIVE_DIR = '/tmp/concrete/testing/negative/'\n","\n","# Since we have set the train/val/test ratio as 6:2:2,\n","training_size = 0.6\n","valid_size = 0.2\n","split_data(POSITIVE_SOURCE_DIR, TRAINING_POSITIVE_DIR, VALID_POSITIVE_DIR,TESTING_POSITIVE_DIR, training_size, valid_size)\n","split_data(NEGATIVE_SOURCE_DIR, TRAINING_NEGATIVE_DIR, VALID_NEGATIVE_DIR,TESTING_NEGATIVE_DIR, training_size, valid_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NaB-J4E7sCq8","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6bf0bb1b-b755-4d40-a6c7-89dc15017c74"},"source":["print(len(os.listdir('/tmp/concrete/training/positive/')))\n","print(len(os.listdir('/tmp/concrete/training/negative/')))\n","print(len(os.listdir('/tmp/concrete/testing/positive/')))\n","print(len(os.listdir('/tmp/concrete/testing/negative/')))\n","print(len(os.listdir('/tmp/concrete/valid/positive/')))\n","print(len(os.listdir('/tmp/concrete/valid/negative/')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["12000\n","12000\n","4000\n","4000\n","4000\n","4000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xBzhpTxZ0gli"},"source":["#**1_NASNetLarge (Adam)**#\n","\n","*   dropout = 0.1 / (0.3) \n","*   loss = binary_crossentropy\n","*   optimizer = Adam(learning_rate = 0.1 / 0.01)\n","*   epoch = Earlystopping(maximize val_recall / patience=10)\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"fer9Oi3Ir4Rb"},"source":["# Nasnet_Large\n","def Nasnet_Large_Adam(dropout,learning_rate,epochs):\n","  pre_trained_model = NASNetLarge(input_shape=(227,227,3),include_top=False,weights='None')\n","  pre_trained_model.load_weights(/content/NASNet-large-no-top.h5)\n","  for layer in pre_trained_model.layers:\n","    layer.trainable = False\n","  last_output = pre_trained_model.output\n","\n","  x = layers.Flatten()(last_output)\n","  x = layers.Dense(512,activation='relu')(x)\n","  x = layers.Dropout(dropout)(x)\n","  x = layers.Dense(1,activation='sigmoid')(x)\n","  model = Model(pre_trained_model.input,x)\n","  model.compile(optimizer = keras.optimizers.Adam(lr=learning_rate),loss = 'binary_crossentropy',metrics=['Recall'])\n","\n","  TRAINING_DIR = '/tmp/concrete/training/'\n","  train_datagen = ImageDataGenerator(rescale = 1/255)\n","  train_generator = train_datagen.flow_from_directory(TRAINING_DIR, batch_size = 64, target_size = (227,227), class_mode = 'binary')\n","  VALIDATION_DIR = '/tmp/concrete/valid/'\n","  valid_datagen = ImageDataGenerator(rescale = 1/255)\n","  valid_generator = valid_datagen.flow_from_directory(VALIDATION_DIR, batch_size = 64, class_mode = 'binary', target_size = (227,227))\n","\n"," # Early stopping with patience=10\n","  early_stopping=EarlyStopping(monitor='val_recall',mode='max',verbose=1,patience = 10)\n","  mc= ModelCheckpoint('/tmp/checkpoint', monitor='val_recall', mode='max', save_best_only=True)\n","  history = model.fit_generator(train_generator, epochs=epochs, steps_per_epoch = 10, validation_data=valid_generator, verbose = 1, callbacks = [early_stopping,mc])\n","\n","  # Plotting Graphs\n","  rec = history.history['recall']\n","  val_rec = history.history['val_recall']\n","  loss = history.history['loss']\n","  val_loss = history.history['val_loss']\n","  print(\"Epochs here are :\", len(rec))\n","  fig, ax = plt.subplots(2, 1)\n","  ax[0].plot(history.history['loss'], color = 'b', label = \"Training loss\")\n","  ax[0].plot(history.history['val_loss'], color='r', label = \"validation loss\", axes = ax[0])\n","  legend = ax[0].legend(loc=(1.05,0), shadow = True)\n","  ax[1].plot(history.history['recall'], color = 'b', label = \"Training recall\")\n","  ax[1].plot(history.history['val_recall'], color = 'r', label = \"Validation recall\")\n","  legend = ax[1].legend(loc = (1.05,0), shadow = True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LPUWfU-p_jF7","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"c8708554-8c32-405c-dd4a-b593eac432fc"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) Adam optimizer(learning rate = 0.1) \n","Nasnet_Large_Adam(0.1,0.1,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/nasnet/NASNet-large-no-top.h5\n","343613440/343610240 [==============================] - 2s 0us/step\n","Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 362s 35s/step - loss: 2039.5940 - recall: 0.6429 - val_loss: 1834.3893 - val_recall: 0.9990\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 312s 34s/step - loss: 1611.8384 - recall: 0.9989 - val_loss: 1905.7123 - val_recall: 0.9622\n","Epoch 3/100\n","10/10 [==============================] - 313s 34s/step - loss: 886.5627 - recall: 0.9761 - val_loss: 896.1035 - val_recall: 0.9958\n","Epoch 4/100\n","10/10 [==============================] - 313s 35s/step - loss: 115.1211 - recall: 1.0000 - val_loss: 574.5526 - val_recall: 0.9940\n","Epoch 5/100\n","10/10 [==============================] - 313s 34s/step - loss: 350.4990 - recall: 0.9945 - val_loss: 695.6184 - val_recall: 0.9737\n","Epoch 6/100\n","10/10 [==============================] - 313s 34s/step - loss: 1459.3014 - recall: 0.9535 - val_loss: 872.3466 - val_recall: 0.9998\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 7/100\n","10/10 [==============================] - 312s 34s/step - loss: 53.0710 - recall: 1.0000 - val_loss: 323.2968 - val_recall: 0.9937\n","Epoch 8/100\n","10/10 [==============================] - 313s 34s/step - loss: 95.0126 - recall: 0.9949 - val_loss: 349.5035 - val_recall: 0.9900\n","Epoch 9/100\n","10/10 [==============================] - 313s 35s/step - loss: 17.2852 - recall: 0.9946 - val_loss: 282.2696 - val_recall: 0.9940\n","Epoch 10/100\n","10/10 [==============================] - 313s 35s/step - loss: 7.1174 - recall: 1.0000 - val_loss: 270.7201 - val_recall: 0.9925\n","Epoch 11/100\n","10/10 [==============================] - 313s 35s/step - loss: 564.9007 - recall: 0.9917 - val_loss: 184.2891 - val_recall: 0.9877\n","Epoch 12/100\n","10/10 [==============================] - 313s 35s/step - loss: 293.4897 - recall: 0.9952 - val_loss: 112.0430 - val_recall: 0.9962\n","Epoch 13/100\n","10/10 [==============================] - 313s 35s/step - loss: 1.6848 - recall: 0.9943 - val_loss: 139.9163 - val_recall: 0.9973\n","Epoch 14/100\n","10/10 [==============================] - 313s 35s/step - loss: 138.7976 - recall: 0.9891 - val_loss: 103.1081 - val_recall: 0.9980\n","Epoch 15/100\n","10/10 [==============================] - 313s 35s/step - loss: 3.5674 - recall: 0.9991 - val_loss: 76.6592 - val_recall: 0.9868\n","Epoch 16/100\n","10/10 [==============================] - 313s 35s/step - loss: 50.6524 - recall: 0.9911 - val_loss: 66.3429 - val_recall: 0.9847\n","Epoch 00016: early stopping\n","Epochs here are : 16\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"H80r4aBB69du","colab":{"base_uri":"https://localhost:8080/","height":830},"outputId":"c835d4e9-9902-4ea1-8c71-91fe70f1fbae"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) Adam optimizer(learning rate = 0.01) \n","Nasnet_Large_Adam(0.1,0.01,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/nasnet/NASNet-large-no-top.h5\n","343613440/343610240 [==============================] - 2s 0us/step\n","Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 297s 27s/step - loss: 15.9224 - recall: 0.8870 - val_loss: 28.3260 - val_recall: 0.9985\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 251s 28s/step - loss: 27.3340 - recall: 0.9924 - val_loss: 8.1079 - val_recall: 0.9762\n","Epoch 3/100\n","10/10 [==============================] - 253s 28s/step - loss: 7.2219 - recall: 0.9715 - val_loss: 6.0960 - val_recall: 0.9925\n","Epoch 4/100\n","10/10 [==============================] - 251s 28s/step - loss: 1.7252 - recall: 0.9859 - val_loss: 6.8801 - val_recall: 0.9905\n","Epoch 5/100\n","10/10 [==============================] - 250s 28s/step - loss: 5.7134 - recall: 0.9984 - val_loss: 7.1407 - val_recall: 0.9937\n","Epoch 6/100\n","10/10 [==============================] - 251s 28s/step - loss: 4.0435 - recall: 0.9893 - val_loss: 6.4772 - val_recall: 0.9927\n","Epoch 7/100\n","10/10 [==============================] - 250s 28s/step - loss: 6.0458 - recall: 0.9851 - val_loss: 3.7734 - val_recall: 0.9855\n","Epoch 8/100\n","10/10 [==============================] - 252s 28s/step - loss: 0.8167 - recall: 0.9886 - val_loss: 3.7519 - val_recall: 0.9885\n","Epoch 9/100\n","10/10 [==============================] - 253s 28s/step - loss: 2.6576 - recall: 0.9734 - val_loss: 3.9167 - val_recall: 0.9955\n","Epoch 10/100\n","10/10 [==============================] - 254s 28s/step - loss: 4.9639 - recall: 0.9895 - val_loss: 2.6412 - val_recall: 0.9918\n","Epoch 11/100\n","10/10 [==============================] - 254s 28s/step - loss: 0.6193 - recall: 0.9987 - val_loss: 3.8553 - val_recall: 0.9847\n","Epoch 00011: early stopping\n","Epochs here are : 11\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"azhrVxpS7MaO"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) Adam optimizer(learning rate = 0.1) \n","#Nasnet_Large_Adam(0.3,0.1,100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ga04KZCu9HGy"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) Adam optimizer(learning rate = 0.01) \n","#Nasnet_Large_Adam(0.3,0.01,100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pdcn_yDsFQJO"},"source":["#uploaded = files.upload()\n","\n","#for fn in uploaded.keys():\n"," \n","  # predicting images\n","  #path = fn\n","  #img = image.load_img(path, target_size=(150, 150))\n","  #x = image.img_to_array(img)\n","  #x = np.expand_dims(x, axis=0)\n","\n","  #images = np.vstack([x])\n","  #classes = model.predict(images, batch_size=10)\n","  #print(fn)\n","  #print(classes)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Nk0MwdeG9Pu_"},"source":["#**2_NASNetLarge (MomentumSGD)**#\n","\n","*   dropout = 0.1 / (0.3) \n","*   loss = binary_crossentropy\n","*   optimizer = MomentumSGD(learning_rate = 0.1 / 0.01)\n","*   epoch = Earlystopping(maximize val_recall / patience=10)\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"DxJe0wKM9PvA"},"source":["def Nasnet_Large_MomentumSGD(dropout,learning_rate,epochs):\n","  pre_trained_model = NASNetLarge(input_shape=(227,227,3),include_top=False,weights='None')\n","  pre_trained_model.load_weights(/content/NASNet-large-no-top.h5)\n","  for layer in pre_trained_model.layers:\n","    layer.trainable = False\n","  last_output = pre_trained_model.output\n","\n","  x = layers.Flatten()(last_output)\n","  x = layers.Dense(512,activation='relu')(x)\n","  x = layers.Dropout(dropout)(x)\n","  x = layers.Dense(1,activation='sigmoid')(x)\n","  model = Model(pre_trained_model.input,x)\n","  model.compile(optimizer = keras.optimizers.SGD(lr=learning_rate, momentum=0.9),loss = 'binary_crossentropy',metrics=['Recall'])\n","\n","  TRAINING_DIR = '/tmp/concrete/training/'\n","  train_datagen = ImageDataGenerator(rescale = 1/255)\n","  train_generator = train_datagen.flow_from_directory(TRAINING_DIR, batch_size = 64, target_size = (227,227), class_mode = 'binary')\n","  VALIDATION_DIR = '/tmp/concrete/valid/'\n","  valid_datagen = ImageDataGenerator(rescale = 1/255)\n","  valid_generator = valid_datagen.flow_from_directory(VALIDATION_DIR, batch_size = 64, class_mode = 'binary', target_size = (227,227))\n","\n"," # Early stopping with patience=10\n","  early_stopping=EarlyStopping(monitor='val_recall',mode='max',verbose=1,patience = 10)\n","  mc= ModelCheckpoint('/tmp/checkpoint', monitor='val_recall', mode='max', save_best_only=True)\n","  history = model.fit_generator(train_generator, epochs=epochs, steps_per_epoch = 10, validation_data=valid_generator, verbose = 1, callbacks = [early_stopping,mc])\n","\n","  # Plotting Graphs\n","  rec = history.history['recall']\n","  val_rec = history.history['val_recall']\n","  loss = history.history['loss']\n","  val_loss = history.history['val_loss']\n","  print(\"Epochs here are :\", len(rec))\n","  fig, ax = plt.subplots(2, 1)\n","  ax[0].plot(history.history['loss'], color = 'b', label = \"Training loss\")\n","  ax[0].plot(history.history['val_loss'], color='r', label = \"validation loss\", axes = ax[0])\n","  legend = ax[0].legend(loc=(1.05,0), shadow = True)\n","  ax[1].plot(history.history['recall'], color = 'b', label = \"Training recall\")\n","  ax[1].plot(history.history['val_recall'], color = 'r', label = \"Validation recall\")\n","  legend = ax[1].legend(loc = (1.05,0), shadow = True)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MbNCGF5o9PvJ","colab":{"base_uri":"https://localhost:8080/","height":848},"outputId":"43392045-1f08-43fa-9ab6-e33851ff3106"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) MomentumSGD optimizer(learning rate = 0.1) \n","Nasnet_Large_MomentumSGD(0.1,0.1,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 269s 28s/step - loss: 9992.5020 - recall: 0.4975 - val_loss: 1.7057 - val_recall: 0.9865\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 256s 28s/step - loss: 1.3296 - recall: 0.9680 - val_loss: 0.6198 - val_recall: 0.9962\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 3/100\n","10/10 [==============================] - 254s 28s/step - loss: 0.9541 - recall: 0.9700 - val_loss: 2.3909 - val_recall: 0.9778\n","Epoch 4/100\n","10/10 [==============================] - 255s 28s/step - loss: 3.5310 - recall: 0.9410 - val_loss: 0.7441 - val_recall: 0.9582\n","Epoch 5/100\n","10/10 [==============================] - 255s 28s/step - loss: 0.1209 - recall: 0.9725 - val_loss: 0.6735 - val_recall: 0.9827\n","Epoch 6/100\n","10/10 [==============================] - 254s 28s/step - loss: 0.1001 - recall: 0.9426 - val_loss: 0.6660 - val_recall: 0.9835\n","Epoch 7/100\n","10/10 [==============================] - 253s 28s/step - loss: 0.1757 - recall: 0.9286 - val_loss: 0.7872 - val_recall: 0.8748\n","Epoch 8/100\n","10/10 [==============================] - 253s 28s/step - loss: 0.3805 - recall: 0.8375 - val_loss: 1.9723 - val_recall: 0.9890\n","Epoch 9/100\n","10/10 [==============================] - 254s 28s/step - loss: 3.3299 - recall: 0.8545 - val_loss: 0.7008 - val_recall: 0.9722\n","Epoch 10/100\n","10/10 [==============================] - 254s 28s/step - loss: 0.2782 - recall: 0.8673 - val_loss: 0.4637 - val_recall: 0.8572\n","Epoch 11/100\n","10/10 [==============================] - 252s 28s/step - loss: 2.5722 - recall: 0.8097 - val_loss: 0.1551 - val_recall: 0.8673\n","Epoch 12/100\n","10/10 [==============================] - 254s 28s/step - loss: 0.4361 - recall: 0.7478 - val_loss: 47.2665 - val_recall: 0.4548\n","Epoch 00012: early stopping\n","Epochs here are : 12\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"4I1kCliP-hQO","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"8c8417af-6c76-4842-e3c6-57e36e683f66"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) MomentumSGD optimizer(learning rate = 0.01) \n","Nasnet_Large_MomentumSGD(0.1,0.01,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 277s 29s/step - loss: 3.5557 - recall: 0.7858 - val_loss: 0.1193 - val_recall: 0.9927\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 247s 27s/step - loss: 0.2391 - recall: 0.9662 - val_loss: 0.0827 - val_recall: 0.9945\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 3/100\n","10/10 [==============================] - 241s 26s/step - loss: 0.0556 - recall: 0.9974 - val_loss: 0.0603 - val_recall: 0.9927\n","Epoch 4/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0722 - recall: 0.9891 - val_loss: 0.3773 - val_recall: 0.9973\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 5/100\n","10/10 [==============================] - 240s 26s/step - loss: 0.0745 - recall: 0.9994 - val_loss: 0.1447 - val_recall: 0.9793\n","Epoch 6/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0360 - recall: 0.9953 - val_loss: 0.0576 - val_recall: 0.9955\n","Epoch 7/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0430 - recall: 0.9964 - val_loss: 0.0467 - val_recall: 0.9975\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 8/100\n","10/10 [==============================] - 241s 26s/step - loss: 0.0233 - recall: 0.9965 - val_loss: 0.0546 - val_recall: 0.9862\n","Epoch 9/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0088 - recall: 0.9959 - val_loss: 0.0403 - val_recall: 0.9937\n","Epoch 10/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0222 - recall: 1.0000 - val_loss: 0.0423 - val_recall: 0.9905\n","Epoch 11/100\n","10/10 [==============================] - 252s 28s/step - loss: 0.0075 - recall: 0.9899 - val_loss: 0.0302 - val_recall: 0.9942\n","Epoch 12/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0034 - recall: 0.9962 - val_loss: 0.0418 - val_recall: 0.9983\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 13/100\n","10/10 [==============================] - 243s 26s/step - loss: 0.0113 - recall: 1.0000 - val_loss: 0.0302 - val_recall: 0.9970\n","Epoch 14/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0213 - recall: 1.0000 - val_loss: 0.0326 - val_recall: 0.9923\n","Epoch 15/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0201 - recall: 0.9947 - val_loss: 0.0382 - val_recall: 0.9860\n","Epoch 16/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0101 - recall: 0.9962 - val_loss: 0.0219 - val_recall: 0.9977\n","Epoch 17/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0222 - recall: 0.9995 - val_loss: 0.0394 - val_recall: 0.9995\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 18/100\n","10/10 [==============================] - 240s 26s/step - loss: 0.0481 - recall: 1.0000 - val_loss: 0.0217 - val_recall: 0.9983\n","Epoch 19/100\n","10/10 [==============================] - 250s 28s/step - loss: 0.0144 - recall: 0.9966 - val_loss: 0.0171 - val_recall: 0.9962\n","Epoch 20/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0109 - recall: 0.9991 - val_loss: 0.0154 - val_recall: 0.9975\n","Epoch 21/100\n","10/10 [==============================] - 252s 28s/step - loss: 0.0070 - recall: 0.9968 - val_loss: 0.0225 - val_recall: 0.9987\n","Epoch 22/100\n","10/10 [==============================] - 252s 28s/step - loss: 0.0200 - recall: 0.9994 - val_loss: 0.0321 - val_recall: 0.9862\n","Epoch 23/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0174 - recall: 0.9978 - val_loss: 0.0166 - val_recall: 0.9940\n","Epoch 24/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0042 - recall: 1.0000 - val_loss: 0.0150 - val_recall: 0.9980\n","Epoch 25/100\n","10/10 [==============================] - 251s 28s/step - loss: 0.0186 - recall: 0.9984 - val_loss: 0.0141 - val_recall: 0.9973\n","Epoch 26/100\n","10/10 [==============================] - 253s 28s/step - loss: 0.0172 - recall: 0.9991 - val_loss: 0.0147 - val_recall: 0.9958\n","Epoch 27/100\n","10/10 [==============================] - 255s 28s/step - loss: 0.0235 - recall: 1.0000 - val_loss: 0.0140 - val_recall: 0.9950\n","Epoch 00027: early stopping\n","Epochs here are : 27\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"767PL8LHCSfA"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) MomentumSGD optimizer(learning rate = 0.1) \n","#Nasnet_Large_MomentumSGD(0.3,0.1,100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3tsh6WXTAaZM"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) MomentumSGD optimizer(learning rate = 0.01) \n","#Nasnet_Large_MomentumSGD(0.3,0.01,100)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hJWCPR9KrWuv"},"source":["#**3_NASNetLarge (Minibatch SGD)**#\n","\n","*   dropout = 0.1 / (0.3) \n","*   loss = binary_crossentropy\n","*   optimizer = Minibatch SGD(batch_size=16 , lr=0.1 / 0.01)\n","*   epoch = Earlystopping(maximize val_recall / patience=10)\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"m3-Ec3y5rWu0"},"source":["# Alexnet\n","def Nasnet_Large_MinibatchSGD(dropout,learning_rate,epochs):\n","  pre_trained_model = NASNetLarge(input_shape=(227,227,3),include_top=False,weights='None')\n","  pre_trained_model.load_weights(/content/NASNet-large-no-top.h5)\n","  for layer in pre_trained_model.layers:\n","    layer.trainable = False\n","  last_output = pre_trained_model.output\n","\n","  x = layers.Flatten()(last_output)\n","  x = layers.Dense(512,activation='relu')(x)\n","  x = layers.Dropout(dropout)(x)\n","  x = layers.Dense(1,activation='sigmoid')(x)\n","  model = Model(pre_trained_model.input,x)\n","  model.compile(optimizer = keras.optimizers.SGD(lr=learning_rate),loss = 'binary_crossentropy',metrics=['Recall'])\n","\n","  TRAINING_DIR = '/tmp/concrete/training/'\n","  train_datagen = ImageDataGenerator(rescale = 1/255)\n","  train_generator = train_datagen.flow_from_directory(TRAINING_DIR, batch_size = 16, target_size = (227,227), class_mode = 'binary')\n","  VALIDATION_DIR = '/tmp/concrete/valid/'\n","  valid_datagen = ImageDataGenerator(rescale = 1/255)\n","  valid_generator = valid_datagen.flow_from_directory(VALIDATION_DIR, batch_size = 16, class_mode = 'binary', target_size = (227,227))\n","\n"," # Early stopping with patience=10\n","  early_stopping=EarlyStopping(monitor='val_recall',mode='max',verbose=1,patience = 10)\n","  mc= ModelCheckpoint('/tmp/checkpoint', monitor='val_recall', mode='max', save_best_only=True)\n","  history = model.fit_generator(train_generator, epochs=epochs, steps_per_epoch = 10, validation_data=valid_generator, verbose = 1, callbacks = [early_stopping,mc])\n","\n","  # Plotting Graphs\n","  rec = history.history['recall']\n","  val_rec = history.history['val_recall']\n","  loss = history.history['loss']\n","  val_loss = history.history['val_loss']\n","  print(\"Epochs here are :\", len(rec))\n","  fig, ax = plt.subplots(2, 1)\n","  ax[0].plot(history.history['loss'], color = 'b', label = \"Training loss\")\n","  ax[0].plot(history.history['val_loss'], color='r', label = \"Validation loss\", axes = ax[0])\n","  legend = ax[0].legend(loc=(1.05,0), shadow = True)\n","  ax[1].plot(history.history['recall'], color = 'b', label = \"Training recall\")\n","  ax[1].plot(history.history['val_recall'], color = 'r', label = \"Validation recall\")\n","  legend = ax[1].legend(loc = (1.05,0), shadow = True)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":830},"id":"tME0xzIVrWu2","executionInfo":{"status":"ok","timestamp":1617063520979,"user_tz":-540,"elapsed":2874760,"user":{"displayName":"­박상현 / 학생 / 경제학부","photoUrl":"","userId":"06965266928393907722"}},"outputId":"ac58ed3b-5a97-4491-a913-d1edb94968f3"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) MinibatchSGD optimizer(learning rate = 0.1) \n","Nasnet_Large_MinibatchSGD(0.1,0.1,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/nasnet/NASNet-large-no-top.h5\n","343613440/343610240 [==============================] - 33s 0us/step\n","Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 294s 27s/step - loss: 498.8250 - recall: 0.4204 - val_loss: 18.6003 - val_recall: 1.0000\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 244s 27s/step - loss: 3.2628 - recall: 0.9858 - val_loss: 0.3705 - val_recall: 0.9610\n","Epoch 3/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.2143 - recall: 0.8961 - val_loss: 0.5027 - val_recall: 0.5962\n","Epoch 4/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.5087 - recall: 0.8181 - val_loss: 0.1836 - val_recall: 0.9358\n","Epoch 5/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.2166 - recall: 0.9557 - val_loss: 0.8214 - val_recall: 0.9055\n","Epoch 6/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.0477 - recall: 0.9433 - val_loss: 0.7298 - val_recall: 0.9700\n","Epoch 7/100\n","10/10 [==============================] - 242s 27s/step - loss: 4.1792 - recall: 0.9277 - val_loss: 0.2208 - val_recall: 0.9900\n","Epoch 8/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.5186 - recall: 0.8916 - val_loss: 0.1332 - val_recall: 0.9645\n","Epoch 9/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.1066 - recall: 0.9933 - val_loss: 0.1577 - val_recall: 0.9078\n","Epoch 10/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.0632 - recall: 0.9258 - val_loss: 0.1290 - val_recall: 0.9632\n","Epoch 11/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.1402 - recall: 0.9563 - val_loss: 0.1785 - val_recall: 0.9967\n","Epoch 00011: early stopping\n","Epochs here are : 11\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":974},"id":"3Olqc_GVrWu8","executionInfo":{"status":"ok","timestamp":1617067534811,"user_tz":-540,"elapsed":6885618,"user":{"displayName":"­박상현 / 학생 / 경제학부","photoUrl":"","userId":"06965266928393907722"}},"outputId":"a8906974-2520-4b6d-bb62-01fef0ee842f"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.1 and 2) MinibatchSGD optimizer(learning rate = 0.01) \n","Nasnet_Large_MinibatchSGD(0.1,0.01,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n","Epoch 1/100\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["10/10 [==============================] - 262s 28s/step - loss: 6.6167 - recall: 0.5390 - val_loss: 0.0478 - val_recall: 0.9795\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 244s 27s/step - loss: 0.1644 - recall: 0.9496 - val_loss: 0.0386 - val_recall: 0.9830\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 3/100\n","10/10 [==============================] - 244s 27s/step - loss: 0.0204 - recall: 1.0000 - val_loss: 0.0457 - val_recall: 0.9755\n","Epoch 4/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0246 - recall: 1.0000 - val_loss: 0.0596 - val_recall: 0.9650\n","Epoch 5/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0424 - recall: 0.9863 - val_loss: 0.0482 - val_recall: 0.9980\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 6/100\n","10/10 [==============================] - 244s 27s/step - loss: 0.0250 - recall: 1.0000 - val_loss: 0.0225 - val_recall: 0.9955\n","Epoch 7/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0417 - recall: 0.9903 - val_loss: 0.0219 - val_recall: 0.9915\n","Epoch 8/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0282 - recall: 1.0000 - val_loss: 0.0224 - val_recall: 0.9895\n","Epoch 9/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0201 - recall: 1.0000 - val_loss: 0.0463 - val_recall: 0.9750\n","Epoch 10/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.0160 - recall: 0.9943 - val_loss: 0.0204 - val_recall: 0.9970\n","Epoch 11/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0050 - recall: 0.9955 - val_loss: 0.0200 - val_recall: 0.9920\n","Epoch 12/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0032 - recall: 1.0000 - val_loss: 0.0199 - val_recall: 0.9927\n","Epoch 13/100\n","10/10 [==============================] - 242s 27s/step - loss: 0.0273 - recall: 0.9959 - val_loss: 0.0255 - val_recall: 0.9980\n","Epoch 14/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0139 - recall: 1.0000 - val_loss: 0.0193 - val_recall: 0.9935\n","Epoch 15/100\n","10/10 [==============================] - 243s 27s/step - loss: 0.0077 - recall: 1.0000 - val_loss: 0.0166 - val_recall: 0.9935\n","Epoch 00015: early stopping\n","Epochs here are : 15\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":936},"id":"vYrYsfeSrWu-","outputId":"f643f3be-7124-465b-abaf-b170d6b2a4c2"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) MinibatchSGD optimizer(learning rate = 0.1) \n","#Nasnet_Large_MinibatchSGD(0.3,0.1,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/nasnet/NASNet-large-no-top.h5\n","343613440/343610240 [==============================] - 3s 0us/step\n","Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - 305s 29s/step - loss: 1025.8993 - recall: 0.4960 - val_loss: 64.9671 - val_recall: 0.1790\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 2/100\n","10/10 [==============================] - 256s 28s/step - loss: 218.9072 - recall: 0.6254 - val_loss: 0.2550 - val_recall: 0.9858\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 3/100\n","10/10 [==============================] - 257s 28s/step - loss: 11.3308 - recall: 0.6233 - val_loss: 0.6686 - val_recall: 0.9983\n","INFO:tensorflow:Assets written to: /tmp/checkpoint/assets\n","Epoch 4/100\n","10/10 [==============================] - 256s 28s/step - loss: 4.6788 - recall: 0.7350 - val_loss: 0.4335 - val_recall: 0.6940\n","Epoch 5/100\n","10/10 [==============================] - 257s 28s/step - loss: 2.5786 - recall: 0.5923 - val_loss: 0.1921 - val_recall: 0.9298\n","Epoch 6/100\n","10/10 [==============================] - 257s 29s/step - loss: 0.7287 - recall: 0.8735 - val_loss: 0.7646 - val_recall: 0.9835\n","Epoch 7/100\n","10/10 [==============================] - 256s 28s/step - loss: 0.6564 - recall: 0.9240 - val_loss: 0.2146 - val_recall: 0.9697\n","Epoch 8/100\n","10/10 [==============================] - 257s 29s/step - loss: 0.1343 - recall: 0.9624 - val_loss: 0.2101 - val_recall: 0.9700\n","Epoch 9/100\n","10/10 [==============================] - 257s 29s/step - loss: 0.2174 - recall: 0.8923 - val_loss: 0.2155 - val_recall: 0.9433\n","Epoch 10/100\n","10/10 [==============================] - 256s 28s/step - loss: 0.1545 - recall: 0.8573 - val_loss: 0.2037 - val_recall: 0.9607\n","Epoch 11/100\n","10/10 [==============================] - 257s 29s/step - loss: 2.1648 - recall: 0.8696 - val_loss: 0.3217 - val_recall: 0.8195\n","Epoch 12/100\n","10/10 [==============================] - 257s 28s/step - loss: 0.4452 - recall: 0.6522 - val_loss: 0.2421 - val_recall: 0.7695\n","Epoch 13/100\n","10/10 [==============================] - 257s 28s/step - loss: 0.2766 - recall: 0.6416 - val_loss: 0.1659 - val_recall: 0.8905\n","Epoch 00013: early stopping\n","Epochs here are : 13\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G68AEShfrWu_","outputId":"79d0a191-7353-4995-8203-d05435d4cef2"},"source":["# Nasnet Large with 1) dropout layer in the level of 0.3 and 2) MinibatchSGD optimizer(learning rate = 0.01) \n","#Nasnet_Large_MinibatchSGD(0.3,0.01,100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/nasnet/NASNet-large-no-top.h5\n","343613440/343610240 [==============================] - 7s 0us/step\n","Found 24000 images belonging to 2 classes.\n","Found 8000 images belonging to 2 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","10/10 [==============================] - ETA: 0s - loss: 7.4903 - recall: 0.5970 "],"name":"stdout"}]}]}